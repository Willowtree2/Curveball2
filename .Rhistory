print(A)
if(sum(A) > 1){
states = getAllBinaryMatricesWithRowAndColSums(A, max=1000, prnt=F)
stateCount = length(states)
if(stateCount > 1){
cat(paste("State count:", stateCount, "\n"))
cat("\n")
runtime.cb = curveball.getRuntime(A, states, eps, attempts)
runtime.gs = goodshuffle.getRuntime(A, states, eps, attempts)
results = data.frame(method=c('Curveball', 'Good-Shuffle'),
N=c(runtime.cb[1], runtime.gs[1]),
t=c(runtime.cb[2], runtime.gs[2]))
results = cbind.data.frame(results, total=results$N*results$t)
print(results)
}else{
cat("Trivial state graph, single state \n")
}
}
}
basedir <- '~/Git/Github/Curveball/'
library('igraph')
setwd(basedir)
eps = 0.000001
attempts = 10000
n = 3
s = floor(0.25 * n * n)
e = ceiling(0.5 * n * n)
m = s
cat("=======================================================\n")
cat(paste("m =", m, "\n"))
A = generate_matrix(n, n, m)
generateRandomBinaryMatrix = function(r,c,m=0,p=0){
result = mat.or.vec(nr=r, nc=c)
if(m != 0)
idx = sample(1:(r*c), m)
else if(p != 0){
samp = runif(r*c)
idx = which(samp <= p)
}
result[idx] = 1
return(result)
}
A = generateRandomBinaryMatrix(n, n, m)
source('binaryMatrices.R')
A = generateRandomBinaryMatrix(n, n, m)
states = getAllBinaryMatricesWithRowAndColSums(A, max=1000, prnt=F)
stateCount = length(states)
cat(paste("State count:", stateCount, "\n"))
A = generateRandomBinaryMatrix(n, n, m)
states = getAllBinaryMatricesWithRowAndColSums(A, max=1000, prnt=F)
stateCount = length(states)
cat(paste("State count:", stateCount, "\n"))
m=3
cat(paste("m =", m, "\n"))
A = generateRandomBinaryMatrix(n, n, m)
states = getAllBinaryMatricesWithRowAndColSums(A, max=1000, prnt=F)
stateCount = length(states)
cat(paste("State count:", stateCount, "\n"))
runtime.cb = curveball.getRuntime(A, states, eps, attempts)
source('binaryMatrices.R')
source('curveball.R')
source('goodshuffle.R')
source('mixingtime.R')
n = 3
s = floor(0.25 * n * n)
e = ceiling(0.5 * n * n)
for(m in s:e){
cat("=======================================================\n")
cat(paste("m =", m, "\n"))
A = generateRandomBinaryMatrix(n, n, m)
print(A)
if(sum(A) > 1){
states = getAllBinaryMatricesWithRowAndColSums(A, max=1000, prnt=F)
stateCount = length(states)
if(stateCount > 1){
cat(paste("State count:", stateCount, "\n"))
cat("\n")
runtime.cb = curveball.getRuntime(A, states, eps, attempts)
runtime.gs = goodshuffle.getRuntime(A, states, eps, attempts)
results = data.frame(method=c('Curveball', 'Good-Shuffle'),
N=c(runtime.cb[1], runtime.gs[1]),
t=c(runtime.cb[2], runtime.gs[2]))
results = cbind.data.frame(results, total=results$N*results$t)
print(results)
}else{
cat("Trivial state graph, single state \n")
}
}
}
runtimeExperiment <- function(A){
print(A)
if(sum(A) > 1){
states = getAllBinaryMatricesWithRowAndColSums(A, max=1000, prnt=F)
stateCount = length(states)
if(stateCount > 1){
cat(paste("State count:", stateCount, "\n"))
cat("\n")
runtime.cb = curveball.getRuntime(A, states, eps, attempts)
runtime.gs = goodshuffle.getRuntime(A, states, eps, attempts)
results = data.frame(method=c('Curveball', 'Good-Shuffle'),
N=c(runtime.cb[1], runtime.gs[1]),
t=c(runtime.cb[2], runtime.gs[2]))
results = cbind.data.frame(results, total=results$N*results$t)
print(results)
}else{
cat("Trivial state graph, single state \n")
}
}
}
n = 3
s = floor(0.25 * n * n)
e = ceiling(0.5 * n * n)
for(m in s:e){
A = generateRandomBinaryMatrix(n, n, m)
runtimeExperiment(A)
}
n*n*0.25
source('../PhD-git/2014/Curveball Comment/results_compare.R')
load('../PhD-git/2014/Curveball Comment/results_compare.R')
dim(results_cu)
class(results_cu)
length(results_cu)
class(results_cu[[1]])
length(results_cu[[1]])
length(results_cu[[1]][[1]])
plot(1:N, perb_10_sh, 'l', col=cols[3], main="Switch and Hold")
r = c = 10
N = 50000
perb_10_sh <- compute_pertubation_sh(r,c,0.1,N)
# Perturbation scores
pertubation.scores = function(M, N, FUN){
swapped = list(M)
d = dim(M)
for(i in 2:N){
swapped[[i]] = FUN(swapped[[i-1]])
}
ps = sapply(swapped, function(A){return(pertubation.score(M,A))})
return(ps)
}
perturbation.score = function(A, B){
D=sum(A)
idx = which(A == 1)
same = length(which(B[idx] == 1))
return(1 - same/D)
}
# Functions for the Good-Shuffle algorithm
# Run the goodshuffle algorithm for a matrix A, repeating step b-d N times
goodshuffle.run <- function(A, N){
R = dim(A)[1]
C = dim(A)[2]
hp = goodshuffle.step.a(A)
for (rep in 1:steps){
hp = goodshuffle.step.bcd(hp)
}
A = goodshuffle.step.f(hp, R, C)
return(A)
}
# Perfrom one trade in the goodshuffle algorithm
goodshuffle.trade <- function(A){
R = dim(A)[1]
C = dim(A)[2]
hp = goodshuffle.step.a(A)
hp = goodshuffle.step.bcd(hp)
A = goodshuffle.step.f(hp, R, C)
return(A)
}
goodshuffle.step.a <- function(A){
hp=list()
for (row in 1:dim(A)[1]) {hp[[row]]=(which(A[row,]==1))}
return(hp)
}
goodshuffle.step.bcd <- function(hp){
l_hp=length(hp)
AB=sample(1:l_hp,2)
a=hp[[AB[1]]]
b=hp[[AB[2]]]
ab=intersect(a,b)
l_ab=length(ab)
l_a=length(a)
l_b=length(b)
if ((l_ab %in% c(l_a,l_b))==F){
tot=setdiff(c(a,b),ab)
l_tot=length(tot)
L=l_a-l_ab
new_a = a
new_b = b
while(setequal(new_a, a)){
tot=sample(tot, l_tot, replace = FALSE, prob = NULL)
new_a = c(ab,tot[1:L])
new_b = c(ab,tot[(L+1):l_tot])
}
hp[[AB[1]]] = new_a
hp[[AB[2]]] = new_b
}
return(hp)
}
goodshuffle.step.f <- function(hp, R, C){
rm=matrix(0,R,C)
for (row in 1:R){rm[row,hp[[row]]]=1}
return(rm)
}
goodshuffle.getTransitionMatrix <- function(states){
stateCount = length(states)
P = mat.or.vec(nr=stateCount, nc=stateCount)
for(i in 1:stateCount)
for(j in 1:stateCount)
if(i != j)
P[i,j] = goodshuffle.getTransitionProbability(states[[i]], states[[j]])
diag(P) = 1 - colSums(P)
return(P)
}
goodshuffle.getTransitionProbability <- function(A, B){
r = dim(A)[1]
# Find out which rows are different
t = A == B
rowIdx = which(apply(t, 1, prod) == 0)
# If more than two the transition probability equals 0
if(length(rowIdx) > 2)
return(0)
# If the same matrix we calculate the transition probability afterwards
if(length(rowIdx) == 0)
return(0)
# The row indices of the two rows that are different
i = rowIdx[1]
j = rowIdx[2]
s_i = length(which(A[i,] - A[j,] == 1))
s_j = length(which(A[j,] - A[i,] == 1))
p = 2/(r*(r-1)) * (factorial(s_i) * factorial(s_j)) / (factorial(s_i + s_j) - (factorial(s_i) * factorial(s_j)))
return(p)
}
goodshuffle.getRuntime <- function(A, states, eps, steps){
P = goodshuffle.getTransitionMatrix(states)
N = getMixingTime(P, eps)
# Run specified number of steps in the curveball algorithm and measure duration
adjacencyLists = goodshuffle.step.a(A)
t = system.time(
for(i in 1:attempts){
adjacencyLists = goodshuffle.step.bcd(adjacencyLists)
})
return(c(N,t[1]))
}
basedir <- '~/Git/Github/Curveball/'
setwd(basedir)
source('binaryMatrices.R')
source('curveball.R')
source('goodshuffle.R')
source('mixingtime.R')
library('igraph')
library('RColorBrewer')
cols = RColorBrewer::brewer.pal(8,'Dark2')
matrices <- list()
results.curveball <- list()
results.goodshuffle <- list()
times.curveball <- list()
times.goodshuffle <- list()
M <- generatematrix(r,c,p=p)
sizes = c(10) #,25,50,100)
i = 1
r = c = sizes[i]
N = 1000
S = 100
ps = seq(0.1,0.5,0.1)
M <- generateRandomBinaryMatrix(r,c,p=p)
p=0.1
M <- generateRandomBinaryMatrix(r,c,p=p)
pertubation.curveball <- list()
pertubation.goodshuffle <- list()
pertubation.curveball <- list()
pertubation.goodshuffle <- list()
t.curveball = mat.or.vec(nr=1, nc=S)
t.goodshuffle = mat.or.vec(nr=1, nc=S)
k=1
# Perturbation scores
pertubation.scores = function(M, N, FUN){
swapped = list(M)
d = dim(M)
for(i in 2:N){
swapped[[i]] = FUN(swapped[[i-1]])
}
ps = sapply(swapped, function(A){return(pertubation.score(M,A))})
return(ps)
}
perturbation.score = function(A, B){
D=sum(A)
idx = which(A == 1)
same = length(which(B[idx] == 1))
return(1 - same/D)
}
t.curveball[k] = system.time(
pertubation.curveball[[k]] <- pertubation.scores(M,N,curveball.trade))[1]
# Perturbation scores
pertubation.scores = function(M, N, FUN){
swapped = list(M)
d = dim(M)
for(i in 2:N){
swapped[[i]] = FUN(swapped[[i-1]])
}
ps = sapply(swapped, function(A){return(pertubation.score(M,A))})
return(ps)
}
pertubation.score = function(A, B){
D=sum(A)
idx = which(A == 1)
same = length(which(B[idx] == 1))
return(1 - same/D)
}
# Perturbation scores
perturbation.scores = function(M, N, FUN){
swapped = list(M)
d = dim(M)
for(i in 2:N){
swapped[[i]] = FUN(swapped[[i-1]])
}
ps = sapply(swapped, function(A){return(perturbation.score(M,A))})
return(ps)
}
perturbation.score = function(A, B){
D=sum(A)
idx = which(A == 1)
same = length(which(B[idx] == 1))
return(1 - same/D)
}
t.curveball[k] = system.time(
perturbation.curveball[[k]] <- perturbation.scores(M,N,curveball.trade))[1]
perturbation.curveball <- list()
perturbation.goodshuffle <- list()
t.curveball = mat.or.vec(nr=1, nc=S)
t.goodshuffle = mat.or.vec(nr=1, nc=S)
t.curveball[k] = system.time(
perturbation.curveball[[k]] <- perturbation.scores(M,N,curveball.trade))[1]
t.curveball
s = do.call(rbind, perturbation.curveball)
plot(1:N, colMeans(s), 'l', col=cols[1], main=paste('Average Both, p =', p))
s2 = do.call(rbind, perb_cu2)
s2 = do.call(rbind, perturbation.goodshuffle)
lines(1:N, colMeans(s2), col=cols[3])
matrices <- list()
perturbation.scores.curveball <- list()
perturbation.scores.goodshuffle <- list()
times.curveball <- list()
times.goodshuffle <- list()
sizes = c(10) #, 100)
for(i in 1:length(sizes)){
r = c = sizes[i]
N = 1000
S = 100
ps = seq(0.1,0.5,0.1)
for(j in 1:length(ps)){
p = ps[j]
M <- generateRandomBinaryMatrix(r,c,p=p)
perturbation.curveball <- list()
perturbation.goodshuffle <- list()
t.curveball = mat.or.vec(nr=1, nc=S)
t.goodshuffle = mat.or.vec(nr=1, nc=S)
for(k in 1:S){
t.curveball[k] = system.time(
perturbation.curveball[[k]] <- perturbation.scores(M,N,curveball.trade))[1]
t.goodshuffle[k] = system.time(
perturbation.goodshuffle[[k]] <- perturbation.scores(M,N,goodshuffle.trade))[1]
}
# Compute and plot the average perturbation of matrices in 100 Markov chains from the initial
# matrix M for both the Curveball and Good-Shuffle Curveball algorithm
s = do.call(rbind, perturbation.curveball)
plot(1:N, colMeans(s), 'l', col=cols[1], main=paste('Average Both, p =', p))
s2 = do.call(rbind, perturbation.goodshuffle)
lines(1:N, colMeans(s2), col=cols[3])
print(paste("Mean time for curveball 1000 pair extractions: ", mean(t.curveball)))
print(paste("Mean time for good-shuffle curveball 1000 pair extractions: ", mean(t.goodshuffle)))
matrices[[idx]] = M
perturbation.scores.curveball[[idx]] <- perturbation.curveball
perturbation.scores.goodshuffle[[idx]] <- perturbation.goodshuffle
times.curveball[[idx]] <- times.curveball
times.goodshuffle[[idx]] <- times.goodshuffle
}
}
save.image(file='results_compare.R')
matrices <- list()
perturbation.scores.curveball <- list()
perturbation.scores.goodshuffle <- list()
times.curveball <- list()
times.goodshuffle <- list()
idx = 1
sizes = c(10) #, 100)
for(i in 1:length(sizes)){
r = c = sizes[i]
N = 1000
S = 100
ps = seq(0.1,0.5,0.1)
for(j in 1:length(ps)){
p = ps[j]
M <- generateRandomBinaryMatrix(r,c,p=p)
perturbation.curveball <- list()
perturbation.goodshuffle <- list()
t.curveball = mat.or.vec(nr=1, nc=S)
t.goodshuffle = mat.or.vec(nr=1, nc=S)
for(k in 1:S){
t.curveball[k] = system.time(
perturbation.curveball[[k]] <- perturbation.scores(M,N,curveball.trade))[1]
t.goodshuffle[k] = system.time(
perturbation.goodshuffle[[k]] <- perturbation.scores(M,N,goodshuffle.trade))[1]
}
# Compute and plot the average perturbation of matrices in 100 Markov chains from the initial
# matrix M for both the Curveball and Good-Shuffle Curveball algorithm
s = do.call(rbind, perturbation.curveball)
plot(1:N, colMeans(s), 'l', col=cols[1], main=paste('Average Both, p =', p))
s2 = do.call(rbind, perturbation.goodshuffle)
lines(1:N, colMeans(s2), col=cols[3])
print(paste("Mean time for curveball 1000 pair extractions: ", mean(t.curveball)))
print(paste("Mean time for good-shuffle curveball 1000 pair extractions: ", mean(t.goodshuffle)))
matrices[[idx]] = M
perturbation.scores.curveball[[idx]] <- perturbation.curveball
perturbation.scores.goodshuffle[[idx]] <- perturbation.goodshuffle
times.curveball[[idx]] <- times.curveball
times.goodshuffle[[idx]] <- times.goodshuffle
idx = idx + 1
}
}
save.image(file='results_compare.R')
idx
idx =1
perturbation.scores.curveball[[idx]]
colMeans(do.call(rbind, perturbation.scores.curveball[[idx]]))
perturbation.scores.curveball[[idx]] = colMeans(do.call(rbind, perturbation.scores.curveball[[idx]]))
plot(1:N, perturbation.scores.curveball[[idx]], 'l', col=cols[1], main=paste('Average Both, p =', p))
for(idx in 2:4)
perturbation.scores.curveball[[idx]] = colMeans(do.call(rbind, perturbation.scores.curveball[[idx]]))
idx = 5
perturbation.scores.curveball[[idx]] = colMeans(do.call(rbind, perturbation.scores.curveball[[idx]]))
for(idx in 1:5)
perturbation.scores.goodshuffle[[idx]] = colMeans(do.call(rbind, perturbation.scores.goodshuffle[[idx]]))
plot(1:N, perturbation.scores.curveball[[1]], 'l', col=cols[3], main="Curveball")
lines(1:N, perturbation.scores.curveball[[2]], col=RColorBrewer::brewer.pal(3,'Set1')[2])
lines(1:N, perturbation.scores.curveball[[3]], col=cols[5])
plot(1:N, perturbation.scores.curveball[[5]], 'l', col=cols[3], main="Curveball")
lines(1:N, perturbation.scores.curveball[[4]], col=RColorBrewer::brewer.pal(3,'Set1')[2])
plot(1:N, perturbation.scores.curveball[[4]], 'l', col=cols[3], main="Curveball")
lines(1:N, perturbation.scores.curveball[[5]], col=RColorBrewer::brewer.pal(3,'Set1')[2])
lines(1:N, perturbation.scores.curveball[[3]], col=cols[5])
plot(1:N, perturbation.scores.curveball[[3]], 'l', col=cols[3], main="Curveball")
lines(1:N, perturbation.scores.curveball[[4]], col=RColorBrewer::brewer.pal(3,'Set1')[2])
lines(1:N, perturbation.scores.curveball[[5]], col=cols[5])
lines(1:N, perturbation.scores.curveball[[2]], col=cols[2])
lines(1:N, perturbation.scores.curveball[[1]], col=cols[1])
plot(1:N, perturbation.scores.curveball[[2]], 'l', col=cols[2], main="Curveball")
plot(-10, -10, main="Curveball", xlim =c(0,N), ylim=c(0,0.8), xlab="Steps", ylab="Perturbation Score")
lines(1:N, perturbation.scores.curveball[[4]], col=cols[4])
plot(-10, -10, main="Curveball", xlim =c(0,N), ylim=c(0,0.8), xlab="Steps", ylab="Perturbation Score")
for(i in 1:5)
lines(1:N, perturbation.scores.curveball[[i]], col=cols[i])
plot(-10, -10, main="Good-Shuffle", xlim =c(0,N), ylim=c(0,0.8), xlab="Steps", ylab="Perturbation Score")
lines(1:N, perturbation.scores.goodshuffle[[i]], col=cols[i])
plot(-10, -10, main="Good-Shuffle", xlim =c(0,N), ylim=c(0,0.8), xlab="Steps", ylab="Perturbation Score")
for(i in 1:5)
lines(1:N, perturbation.scores.goodshuffle[[i]], col=cols[i])
date()
basedir <- '~/Git/Github/Curveball/'
setwd(basedir)
source('binaryMatrices.R')
source('curveball.R')
source('goodshuffle.R')
source('perturbation.R')
library('igraph')
library('RColorBrewer')
cols = RColorBrewer::brewer.pal(8,'Dark2')
matrices <- list()
perturbation.scores.curveball <- list()
perturbation.scores.goodshuffle <- list()
times.curveball <- list()
times.goodshuffle <- list()
idx = 1
sizes = c(10) #, 100)
for(i in 1:length(sizes)){
r = c = sizes[i]
N = 10
S = 10
ps = seq(0.1,0.5,0.1)
for(j in 1:length(ps)){
p = ps[j]
M <- generateRandomBinaryMatrix(r,c,p=p)
perturbation.curveball <- list()
perturbation.goodshuffle <- list()
t.curveball = mat.or.vec(nr=1, nc=S)
t.goodshuffle = mat.or.vec(nr=1, nc=S)
for(k in 1:S){
t.curveball[k] = system.time(
perturbation.curveball[[k]] <- perturbation.scores(M,N,curveball.trade))[1]
t.goodshuffle[k] = system.time(
perturbation.goodshuffle[[k]] <- perturbation.scores(M,N,goodshuffle.trade))[1]
}
# Compute and plot the average perturbation of matrices in 100 Markov chains from the initial
# matrix M for both the Curveball and Good-Shuffle Curveball algorithm
perturbation.scores.curveball[[idx]] = colMeans(do.call(rbind,perturbation.curveball))
plot(1:N, perturbation.scores.curveball[[idx]], 'l', col=cols[1], main=paste('Average Both, p =', p))
perturbation.scores.goodshuffle[[idx]] = colMeans(do.call(rbind, perturbation.goodshuffle))
lines(1:N, perturbation.scores.goodshuffle[[idx]], col=cols[3])
print(paste("Mean time for curveball 1000 pair extractions: ", mean(t.curveball)))
print(paste("Mean time for good-shuffle curveball 1000 pair extractions: ", mean(t.goodshuffle)))
matrices[[idx]] = M
times.curveball[[idx]] <- times.curveball
times.goodshuffle[[idx]] <- times.goodshuffle
idx = idx + 1
}
}
save(matrices, times.curveball, times.goodshuffle, perturbation.scores.curveball, perturbation.scores.goodshuffle, file=paste("resultsCodeFigure7", date(), ".R", sep="")
)
save(matrices, times.curveball, times.goodshuffle, perturbation.scores.curveball, perturbation.scores.goodshuffle, file=paste("resultsCodeFigure7", date(), ".R", sep=""))
plot(-10, -10, main="Curveball", xlim =c(0,N), ylim=c(0,0.8), xlab="Steps", ylab="Perturbation Score")
for(i in 1:5)
lines(1:N, perturbation.scores.curveball[[i]], col=cols[i])
plot(-10, -10, main="Good-Shuffle", xlim =c(0,N), ylim=c(0,0.8), xlab="Steps", ylab="Perturbation Score")
for(i in 1:5)
lines(1:N, perturbation.scores.goodshuffle[[i]], col=cols[i])
